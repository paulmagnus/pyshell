Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programfile
Rule 1     programfile -> nonempty_block
Rule 2     programfile -> empty
Rule 3     empty -> <empty>
Rule 4     nonempty_block -> statement_complex empty
Rule 5     nonempty_block -> statement_complex nonempty_block
Rule 6     statement_complex -> suite
Rule 7     statement_complex -> line NL
Rule 8     line -> statement_multi
Rule 9     line -> statement_shell
Rule 10    statement_multi -> shellblock
Rule 11    statement_multi -> python_code
Rule 12    statement_multi -> python_code statement_shell
Rule 13    statement_shell -> shellblock statement_multi
Rule 14    python_code -> PYTHON opt_python
Rule 15    python_code -> STRING opt_python
Rule 16    python_code -> DOCSTRING opt_python
Rule 17    opt_python -> python_code
Rule 18    opt_python -> empty
Rule 19    suite -> INDENT nonempty_block DEDENT
Rule 20    shellblock -> SHELL_DELIMITER proc SHELL_DELIMITER
Rule 21    shellblock -> SHELL_DELIMITER procin SHELL_DELIMITER
Rule 22    proc -> command empty
Rule 23    proc -> command procout
Rule 24    command -> arg arglist
Rule 25    command -> arg empty
Rule 26    arglist -> arg empty
Rule 27    arglist -> arg arglist
Rule 28    arg -> word
Rule 29    arg -> var
Rule 30    arg -> string
Rule 31    procout -> pipeout
Rule 32    procout -> streamout
Rule 33    procin -> command STREAM_IN arg procout
Rule 34    procin -> command STREAM_IN arg empty
Rule 35    streamout -> STREAM_OUT empty arg empty empty empty
Rule 36    streamout -> STREAM_OUT LPAREN arg COMMA arg RPAREN
Rule 37    streamout -> ERROUT empty empty empty arg empty
Rule 38    streamout -> BOTHOUT arg
Rule 39    pipeout -> PIPE empty proc empty empty empty
Rule 40    pipeout -> PIPE LPAREN proc COMMA proc RPAREN
Rule 41    pipeout -> ERRPIPE empty empty empty proc empty
Rule 42    pipeout -> BOTHPIPE proc
Rule 43    string -> STRING
Rule 44    var -> VARNAME
Rule 45    word -> WORD

Terminals, with rules where they appear

BOTHOUT              : 38
BOTHPIPE             : 42
COMMA                : 36 40
DEDENT               : 19
DOCSTRING            : 16
ERROUT               : 37
ERRPIPE              : 41
INDENT               : 19
LPAREN               : 36 40
NL                   : 7
PIPE                 : 39 40
PYTHON               : 14
RPAREN               : 36 40
SHELL_DELIMITER      : 20 20 21 21
STREAM_IN            : 33 34
STREAM_OUT           : 35 36
STRING               : 15 43
VARNAME              : 44
WORD                 : 45
error                : 

Nonterminals, with rules where they appear

arg                  : 24 25 26 27 33 34 35 36 36 37 38
arglist              : 24 27
command              : 22 23 33 34
empty                : 2 4 18 22 25 26 34 35 35 35 35 37 37 37 37 39 39 39 39 41 41 41 41
line                 : 7
nonempty_block       : 1 5 19
opt_python           : 14 15 16
pipeout              : 31
proc                 : 20 39 40 40 41 42
procin               : 21
procout              : 23 33
programfile          : 0
python_code          : 11 12 17
shellblock           : 10 13
statement_complex    : 4 5
statement_multi      : 8 13
statement_shell      : 9 12
streamout            : 32
string               : 30
suite                : 6
var                  : 29
word                 : 28

Parsing method: LALR

state 0

    (0) S' -> . programfile
    (1) programfile -> . nonempty_block
    (2) programfile -> . empty
    (4) nonempty_block -> . statement_complex empty
    (5) nonempty_block -> . statement_complex nonempty_block
    (3) empty -> .
    (6) statement_complex -> . suite
    (7) statement_complex -> . line NL
    (19) suite -> . INDENT nonempty_block DEDENT
    (8) line -> . statement_multi
    (9) line -> . statement_shell
    (10) statement_multi -> . shellblock
    (11) statement_multi -> . python_code
    (12) statement_multi -> . python_code statement_shell
    (13) statement_shell -> . shellblock statement_multi
    (20) shellblock -> . SHELL_DELIMITER proc SHELL_DELIMITER
    (21) shellblock -> . SHELL_DELIMITER procin SHELL_DELIMITER
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python

    $end            reduce using rule 3 (empty -> .)
    INDENT          shift and go to state 15
    SHELL_DELIMITER shift and go to state 10
    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9

    programfile                    shift and go to state 1
    suite                          shift and go to state 2
    nonempty_block                 shift and go to state 3
    statement_shell                shift and go to state 4
    statement_complex              shift and go to state 5
    shellblock                     shift and go to state 13
    empty                          shift and go to state 11
    statement_multi                shift and go to state 7
    line                           shift and go to state 12
    python_code                    shift and go to state 8

state 1

    (0) S' -> programfile .



state 2

    (6) statement_complex -> suite .

    INDENT          reduce using rule 6 (statement_complex -> suite .)
    SHELL_DELIMITER reduce using rule 6 (statement_complex -> suite .)
    PYTHON          reduce using rule 6 (statement_complex -> suite .)
    STRING          reduce using rule 6 (statement_complex -> suite .)
    DOCSTRING       reduce using rule 6 (statement_complex -> suite .)
    DEDENT          reduce using rule 6 (statement_complex -> suite .)
    $end            reduce using rule 6 (statement_complex -> suite .)


state 3

    (1) programfile -> nonempty_block .

    $end            reduce using rule 1 (programfile -> nonempty_block .)


state 4

    (9) line -> statement_shell .

    NL              reduce using rule 9 (line -> statement_shell .)


state 5

    (4) nonempty_block -> statement_complex . empty
    (5) nonempty_block -> statement_complex . nonempty_block
    (3) empty -> .
    (4) nonempty_block -> . statement_complex empty
    (5) nonempty_block -> . statement_complex nonempty_block
    (6) statement_complex -> . suite
    (7) statement_complex -> . line NL
    (19) suite -> . INDENT nonempty_block DEDENT
    (8) line -> . statement_multi
    (9) line -> . statement_shell
    (10) statement_multi -> . shellblock
    (11) statement_multi -> . python_code
    (12) statement_multi -> . python_code statement_shell
    (13) statement_shell -> . shellblock statement_multi
    (20) shellblock -> . SHELL_DELIMITER proc SHELL_DELIMITER
    (21) shellblock -> . SHELL_DELIMITER procin SHELL_DELIMITER
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python

    $end            reduce using rule 3 (empty -> .)
    DEDENT          reduce using rule 3 (empty -> .)
    INDENT          shift and go to state 15
    SHELL_DELIMITER shift and go to state 10
    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9

    statement_multi                shift and go to state 7
    suite                          shift and go to state 2
    statement_shell                shift and go to state 4
    statement_complex              shift and go to state 5
    shellblock                     shift and go to state 13
    empty                          shift and go to state 17
    nonempty_block                 shift and go to state 16
    line                           shift and go to state 12
    python_code                    shift and go to state 8

state 6

    (14) python_code -> PYTHON . opt_python
    (17) opt_python -> . python_code
    (18) opt_python -> . empty
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python
    (3) empty -> .

    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9
    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    NL              reduce using rule 3 (empty -> .)

    opt_python                     shift and go to state 18
    empty                          shift and go to state 19
    python_code                    shift and go to state 20

state 7

    (8) line -> statement_multi .

    NL              reduce using rule 8 (line -> statement_multi .)


state 8

    (11) statement_multi -> python_code .
    (12) statement_multi -> python_code . statement_shell
    (13) statement_shell -> . shellblock statement_multi
    (20) shellblock -> . SHELL_DELIMITER proc SHELL_DELIMITER
    (21) shellblock -> . SHELL_DELIMITER procin SHELL_DELIMITER

    NL              reduce using rule 11 (statement_multi -> python_code .)
    SHELL_DELIMITER shift and go to state 10

    statement_shell                shift and go to state 21
    shellblock                     shift and go to state 22

state 9

    (16) python_code -> DOCSTRING . opt_python
    (17) opt_python -> . python_code
    (18) opt_python -> . empty
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python
    (3) empty -> .

    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9
    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    NL              reduce using rule 3 (empty -> .)

    opt_python                     shift and go to state 23
    empty                          shift and go to state 19
    python_code                    shift and go to state 20

state 10

    (20) shellblock -> SHELL_DELIMITER . proc SHELL_DELIMITER
    (21) shellblock -> SHELL_DELIMITER . procin SHELL_DELIMITER
    (22) proc -> . command empty
    (23) proc -> . command procout
    (33) procin -> . command STREAM_IN arg procout
    (34) procin -> . command STREAM_IN arg empty
    (24) command -> . arg arglist
    (25) command -> . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    word                           shift and go to state 26
    arg                            shift and go to state 28
    procin                         shift and go to state 24
    var                            shift and go to state 25
    command                        shift and go to state 31
    string                         shift and go to state 32
    proc                           shift and go to state 33

state 11

    (2) programfile -> empty .

    $end            reduce using rule 2 (programfile -> empty .)


state 12

    (7) statement_complex -> line . NL

    NL              shift and go to state 34


state 13

    (10) statement_multi -> shellblock .
    (13) statement_shell -> shellblock . statement_multi
    (10) statement_multi -> . shellblock
    (11) statement_multi -> . python_code
    (12) statement_multi -> . python_code statement_shell
    (20) shellblock -> . SHELL_DELIMITER proc SHELL_DELIMITER
    (21) shellblock -> . SHELL_DELIMITER procin SHELL_DELIMITER
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python

    NL              reduce using rule 10 (statement_multi -> shellblock .)
    SHELL_DELIMITER shift and go to state 10
    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9

    shellblock                     shift and go to state 36
    statement_multi                shift and go to state 35
    python_code                    shift and go to state 8

state 14

    (15) python_code -> STRING . opt_python
    (17) opt_python -> . python_code
    (18) opt_python -> . empty
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python
    (3) empty -> .

    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9
    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    NL              reduce using rule 3 (empty -> .)

    opt_python                     shift and go to state 37
    empty                          shift and go to state 19
    python_code                    shift and go to state 20

state 15

    (19) suite -> INDENT . nonempty_block DEDENT
    (4) nonempty_block -> . statement_complex empty
    (5) nonempty_block -> . statement_complex nonempty_block
    (6) statement_complex -> . suite
    (7) statement_complex -> . line NL
    (19) suite -> . INDENT nonempty_block DEDENT
    (8) line -> . statement_multi
    (9) line -> . statement_shell
    (10) statement_multi -> . shellblock
    (11) statement_multi -> . python_code
    (12) statement_multi -> . python_code statement_shell
    (13) statement_shell -> . shellblock statement_multi
    (20) shellblock -> . SHELL_DELIMITER proc SHELL_DELIMITER
    (21) shellblock -> . SHELL_DELIMITER procin SHELL_DELIMITER
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python

    INDENT          shift and go to state 15
    SHELL_DELIMITER shift and go to state 10
    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9

    statement_multi                shift and go to state 7
    suite                          shift and go to state 2
    statement_shell                shift and go to state 4
    statement_complex              shift and go to state 5
    shellblock                     shift and go to state 13
    nonempty_block                 shift and go to state 38
    line                           shift and go to state 12
    python_code                    shift and go to state 8

state 16

    (5) nonempty_block -> statement_complex nonempty_block .

    $end            reduce using rule 5 (nonempty_block -> statement_complex nonempty_block .)
    DEDENT          reduce using rule 5 (nonempty_block -> statement_complex nonempty_block .)


state 17

    (4) nonempty_block -> statement_complex empty .

    $end            reduce using rule 4 (nonempty_block -> statement_complex empty .)
    DEDENT          reduce using rule 4 (nonempty_block -> statement_complex empty .)


state 18

    (14) python_code -> PYTHON opt_python .

    SHELL_DELIMITER reduce using rule 14 (python_code -> PYTHON opt_python .)
    NL              reduce using rule 14 (python_code -> PYTHON opt_python .)


state 19

    (18) opt_python -> empty .

    SHELL_DELIMITER reduce using rule 18 (opt_python -> empty .)
    NL              reduce using rule 18 (opt_python -> empty .)


state 20

    (17) opt_python -> python_code .

    SHELL_DELIMITER reduce using rule 17 (opt_python -> python_code .)
    NL              reduce using rule 17 (opt_python -> python_code .)


state 21

    (12) statement_multi -> python_code statement_shell .

    NL              reduce using rule 12 (statement_multi -> python_code statement_shell .)


state 22

    (13) statement_shell -> shellblock . statement_multi
    (10) statement_multi -> . shellblock
    (11) statement_multi -> . python_code
    (12) statement_multi -> . python_code statement_shell
    (20) shellblock -> . SHELL_DELIMITER proc SHELL_DELIMITER
    (21) shellblock -> . SHELL_DELIMITER procin SHELL_DELIMITER
    (14) python_code -> . PYTHON opt_python
    (15) python_code -> . STRING opt_python
    (16) python_code -> . DOCSTRING opt_python

    SHELL_DELIMITER shift and go to state 10
    PYTHON          shift and go to state 6
    STRING          shift and go to state 14
    DOCSTRING       shift and go to state 9

    shellblock                     shift and go to state 36
    statement_multi                shift and go to state 35
    python_code                    shift and go to state 8

state 23

    (16) python_code -> DOCSTRING opt_python .

    SHELL_DELIMITER reduce using rule 16 (python_code -> DOCSTRING opt_python .)
    NL              reduce using rule 16 (python_code -> DOCSTRING opt_python .)


state 24

    (21) shellblock -> SHELL_DELIMITER procin . SHELL_DELIMITER

    SHELL_DELIMITER shift and go to state 39


state 25

    (29) arg -> var .

    SHELL_DELIMITER reduce using rule 29 (arg -> var .)
    COMMA           reduce using rule 29 (arg -> var .)
    RPAREN          reduce using rule 29 (arg -> var .)
    WORD            reduce using rule 29 (arg -> var .)
    VARNAME         reduce using rule 29 (arg -> var .)
    STRING          reduce using rule 29 (arg -> var .)
    PIPE            reduce using rule 29 (arg -> var .)
    ERRPIPE         reduce using rule 29 (arg -> var .)
    BOTHPIPE        reduce using rule 29 (arg -> var .)
    STREAM_OUT      reduce using rule 29 (arg -> var .)
    ERROUT          reduce using rule 29 (arg -> var .)
    BOTHOUT         reduce using rule 29 (arg -> var .)
    STREAM_IN       reduce using rule 29 (arg -> var .)


state 26

    (28) arg -> word .

    SHELL_DELIMITER reduce using rule 28 (arg -> word .)
    COMMA           reduce using rule 28 (arg -> word .)
    RPAREN          reduce using rule 28 (arg -> word .)
    WORD            reduce using rule 28 (arg -> word .)
    VARNAME         reduce using rule 28 (arg -> word .)
    STRING          reduce using rule 28 (arg -> word .)
    PIPE            reduce using rule 28 (arg -> word .)
    ERRPIPE         reduce using rule 28 (arg -> word .)
    BOTHPIPE        reduce using rule 28 (arg -> word .)
    STREAM_OUT      reduce using rule 28 (arg -> word .)
    ERROUT          reduce using rule 28 (arg -> word .)
    BOTHOUT         reduce using rule 28 (arg -> word .)
    STREAM_IN       reduce using rule 28 (arg -> word .)


state 27

    (43) string -> STRING .

    WORD            reduce using rule 43 (string -> STRING .)
    VARNAME         reduce using rule 43 (string -> STRING .)
    STRING          reduce using rule 43 (string -> STRING .)
    STREAM_IN       reduce using rule 43 (string -> STRING .)
    PIPE            reduce using rule 43 (string -> STRING .)
    ERRPIPE         reduce using rule 43 (string -> STRING .)
    BOTHPIPE        reduce using rule 43 (string -> STRING .)
    STREAM_OUT      reduce using rule 43 (string -> STRING .)
    ERROUT          reduce using rule 43 (string -> STRING .)
    BOTHOUT         reduce using rule 43 (string -> STRING .)
    SHELL_DELIMITER reduce using rule 43 (string -> STRING .)
    COMMA           reduce using rule 43 (string -> STRING .)
    RPAREN          reduce using rule 43 (string -> STRING .)


state 28

    (24) command -> arg . arglist
    (25) command -> arg . empty
    (26) arglist -> . arg empty
    (27) arglist -> . arg arglist
    (3) empty -> .
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    STREAM_IN       reduce using rule 3 (empty -> .)
    PIPE            reduce using rule 3 (empty -> .)
    ERRPIPE         reduce using rule 3 (empty -> .)
    BOTHPIPE        reduce using rule 3 (empty -> .)
    STREAM_OUT      reduce using rule 3 (empty -> .)
    ERROUT          reduce using rule 3 (empty -> .)
    BOTHOUT         reduce using rule 3 (empty -> .)
    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    empty                          shift and go to state 40
    arg                            shift and go to state 41
    arglist                        shift and go to state 42
    var                            shift and go to state 25
    word                           shift and go to state 26
    string                         shift and go to state 32

state 29

    (44) var -> VARNAME .

    SHELL_DELIMITER reduce using rule 44 (var -> VARNAME .)
    COMMA           reduce using rule 44 (var -> VARNAME .)
    RPAREN          reduce using rule 44 (var -> VARNAME .)
    WORD            reduce using rule 44 (var -> VARNAME .)
    VARNAME         reduce using rule 44 (var -> VARNAME .)
    STRING          reduce using rule 44 (var -> VARNAME .)
    PIPE            reduce using rule 44 (var -> VARNAME .)
    ERRPIPE         reduce using rule 44 (var -> VARNAME .)
    BOTHPIPE        reduce using rule 44 (var -> VARNAME .)
    STREAM_OUT      reduce using rule 44 (var -> VARNAME .)
    ERROUT          reduce using rule 44 (var -> VARNAME .)
    BOTHOUT         reduce using rule 44 (var -> VARNAME .)
    STREAM_IN       reduce using rule 44 (var -> VARNAME .)


state 30

    (45) word -> WORD .

    SHELL_DELIMITER reduce using rule 45 (word -> WORD .)
    COMMA           reduce using rule 45 (word -> WORD .)
    RPAREN          reduce using rule 45 (word -> WORD .)
    WORD            reduce using rule 45 (word -> WORD .)
    VARNAME         reduce using rule 45 (word -> WORD .)
    STRING          reduce using rule 45 (word -> WORD .)
    STREAM_IN       reduce using rule 45 (word -> WORD .)
    PIPE            reduce using rule 45 (word -> WORD .)
    ERRPIPE         reduce using rule 45 (word -> WORD .)
    BOTHPIPE        reduce using rule 45 (word -> WORD .)
    STREAM_OUT      reduce using rule 45 (word -> WORD .)
    ERROUT          reduce using rule 45 (word -> WORD .)
    BOTHOUT         reduce using rule 45 (word -> WORD .)


state 31

    (22) proc -> command . empty
    (23) proc -> command . procout
    (33) procin -> command . STREAM_IN arg procout
    (34) procin -> command . STREAM_IN arg empty
    (3) empty -> .
    (31) procout -> . pipeout
    (32) procout -> . streamout
    (39) pipeout -> . PIPE empty proc empty empty empty
    (40) pipeout -> . PIPE LPAREN proc COMMA proc RPAREN
    (41) pipeout -> . ERRPIPE empty empty empty proc empty
    (42) pipeout -> . BOTHPIPE proc
    (35) streamout -> . STREAM_OUT empty arg empty empty empty
    (36) streamout -> . STREAM_OUT LPAREN arg COMMA arg RPAREN
    (37) streamout -> . ERROUT empty empty empty arg empty
    (38) streamout -> . BOTHOUT arg

    STREAM_IN       shift and go to state 45
    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    PIPE            shift and go to state 52
    ERRPIPE         shift and go to state 51
    BOTHPIPE        shift and go to state 44
    STREAM_OUT      shift and go to state 49
    ERROUT          shift and go to state 46
    BOTHOUT         shift and go to state 48

    empty                          shift and go to state 47
    procout                        shift and go to state 43
    streamout                      shift and go to state 50
    pipeout                        shift and go to state 53

state 32

    (30) arg -> string .

    SHELL_DELIMITER reduce using rule 30 (arg -> string .)
    COMMA           reduce using rule 30 (arg -> string .)
    RPAREN          reduce using rule 30 (arg -> string .)
    WORD            reduce using rule 30 (arg -> string .)
    VARNAME         reduce using rule 30 (arg -> string .)
    STRING          reduce using rule 30 (arg -> string .)
    PIPE            reduce using rule 30 (arg -> string .)
    ERRPIPE         reduce using rule 30 (arg -> string .)
    BOTHPIPE        reduce using rule 30 (arg -> string .)
    STREAM_OUT      reduce using rule 30 (arg -> string .)
    ERROUT          reduce using rule 30 (arg -> string .)
    BOTHOUT         reduce using rule 30 (arg -> string .)
    STREAM_IN       reduce using rule 30 (arg -> string .)


state 33

    (20) shellblock -> SHELL_DELIMITER proc . SHELL_DELIMITER

    SHELL_DELIMITER shift and go to state 54


state 34

    (7) statement_complex -> line NL .

    INDENT          reduce using rule 7 (statement_complex -> line NL .)
    SHELL_DELIMITER reduce using rule 7 (statement_complex -> line NL .)
    PYTHON          reduce using rule 7 (statement_complex -> line NL .)
    STRING          reduce using rule 7 (statement_complex -> line NL .)
    DOCSTRING       reduce using rule 7 (statement_complex -> line NL .)
    DEDENT          reduce using rule 7 (statement_complex -> line NL .)
    $end            reduce using rule 7 (statement_complex -> line NL .)


state 35

    (13) statement_shell -> shellblock statement_multi .

    NL              reduce using rule 13 (statement_shell -> shellblock statement_multi .)


state 36

    (10) statement_multi -> shellblock .

    NL              reduce using rule 10 (statement_multi -> shellblock .)


state 37

    (15) python_code -> STRING opt_python .

    SHELL_DELIMITER reduce using rule 15 (python_code -> STRING opt_python .)
    NL              reduce using rule 15 (python_code -> STRING opt_python .)


state 38

    (19) suite -> INDENT nonempty_block . DEDENT

    DEDENT          shift and go to state 55


state 39

    (21) shellblock -> SHELL_DELIMITER procin SHELL_DELIMITER .

    SHELL_DELIMITER reduce using rule 21 (shellblock -> SHELL_DELIMITER procin SHELL_DELIMITER .)
    PYTHON          reduce using rule 21 (shellblock -> SHELL_DELIMITER procin SHELL_DELIMITER .)
    STRING          reduce using rule 21 (shellblock -> SHELL_DELIMITER procin SHELL_DELIMITER .)
    DOCSTRING       reduce using rule 21 (shellblock -> SHELL_DELIMITER procin SHELL_DELIMITER .)
    NL              reduce using rule 21 (shellblock -> SHELL_DELIMITER procin SHELL_DELIMITER .)


state 40

    (25) command -> arg empty .

    PIPE            reduce using rule 25 (command -> arg empty .)
    ERRPIPE         reduce using rule 25 (command -> arg empty .)
    BOTHPIPE        reduce using rule 25 (command -> arg empty .)
    STREAM_OUT      reduce using rule 25 (command -> arg empty .)
    ERROUT          reduce using rule 25 (command -> arg empty .)
    BOTHOUT         reduce using rule 25 (command -> arg empty .)
    SHELL_DELIMITER reduce using rule 25 (command -> arg empty .)
    COMMA           reduce using rule 25 (command -> arg empty .)
    RPAREN          reduce using rule 25 (command -> arg empty .)
    STREAM_IN       reduce using rule 25 (command -> arg empty .)


state 41

    (26) arglist -> arg . empty
    (27) arglist -> arg . arglist
    (3) empty -> .
    (26) arglist -> . arg empty
    (27) arglist -> . arg arglist
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    STREAM_IN       reduce using rule 3 (empty -> .)
    PIPE            reduce using rule 3 (empty -> .)
    ERRPIPE         reduce using rule 3 (empty -> .)
    BOTHPIPE        reduce using rule 3 (empty -> .)
    STREAM_OUT      reduce using rule 3 (empty -> .)
    ERROUT          reduce using rule 3 (empty -> .)
    BOTHOUT         reduce using rule 3 (empty -> .)
    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    empty                          shift and go to state 56
    arg                            shift and go to state 41
    arglist                        shift and go to state 57
    var                            shift and go to state 25
    word                           shift and go to state 26
    string                         shift and go to state 32

state 42

    (24) command -> arg arglist .

    PIPE            reduce using rule 24 (command -> arg arglist .)
    ERRPIPE         reduce using rule 24 (command -> arg arglist .)
    BOTHPIPE        reduce using rule 24 (command -> arg arglist .)
    STREAM_OUT      reduce using rule 24 (command -> arg arglist .)
    ERROUT          reduce using rule 24 (command -> arg arglist .)
    BOTHOUT         reduce using rule 24 (command -> arg arglist .)
    SHELL_DELIMITER reduce using rule 24 (command -> arg arglist .)
    COMMA           reduce using rule 24 (command -> arg arglist .)
    RPAREN          reduce using rule 24 (command -> arg arglist .)
    STREAM_IN       reduce using rule 24 (command -> arg arglist .)


state 43

    (23) proc -> command procout .

    SHELL_DELIMITER reduce using rule 23 (proc -> command procout .)
    COMMA           reduce using rule 23 (proc -> command procout .)
    RPAREN          reduce using rule 23 (proc -> command procout .)


state 44

    (42) pipeout -> BOTHPIPE . proc
    (22) proc -> . command empty
    (23) proc -> . command procout
    (24) command -> . arg arglist
    (25) command -> . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    word                           shift and go to state 26
    arg                            shift and go to state 28
    var                            shift and go to state 25
    command                        shift and go to state 58
    string                         shift and go to state 32
    proc                           shift and go to state 59

state 45

    (33) procin -> command STREAM_IN . arg procout
    (34) procin -> command STREAM_IN . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    arg                            shift and go to state 60
    var                            shift and go to state 25
    word                           shift and go to state 26
    string                         shift and go to state 32

state 46

    (37) streamout -> ERROUT . empty empty empty arg empty
    (3) empty -> .

    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 61

state 47

    (22) proc -> command empty .

    SHELL_DELIMITER reduce using rule 22 (proc -> command empty .)
    COMMA           reduce using rule 22 (proc -> command empty .)
    RPAREN          reduce using rule 22 (proc -> command empty .)


state 48

    (38) streamout -> BOTHOUT . arg
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    var                            shift and go to state 25
    word                           shift and go to state 26
    arg                            shift and go to state 62
    string                         shift and go to state 32

state 49

    (35) streamout -> STREAM_OUT . empty arg empty empty empty
    (36) streamout -> STREAM_OUT . LPAREN arg COMMA arg RPAREN
    (3) empty -> .

    LPAREN          shift and go to state 64
    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 63

state 50

    (32) procout -> streamout .

    SHELL_DELIMITER reduce using rule 32 (procout -> streamout .)
    COMMA           reduce using rule 32 (procout -> streamout .)
    RPAREN          reduce using rule 32 (procout -> streamout .)


state 51

    (41) pipeout -> ERRPIPE . empty empty empty proc empty
    (3) empty -> .

    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 65

state 52

    (39) pipeout -> PIPE . empty proc empty empty empty
    (40) pipeout -> PIPE . LPAREN proc COMMA proc RPAREN
    (3) empty -> .

    LPAREN          shift and go to state 67
    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 66

state 53

    (31) procout -> pipeout .

    SHELL_DELIMITER reduce using rule 31 (procout -> pipeout .)
    COMMA           reduce using rule 31 (procout -> pipeout .)
    RPAREN          reduce using rule 31 (procout -> pipeout .)


state 54

    (20) shellblock -> SHELL_DELIMITER proc SHELL_DELIMITER .

    SHELL_DELIMITER reduce using rule 20 (shellblock -> SHELL_DELIMITER proc SHELL_DELIMITER .)
    PYTHON          reduce using rule 20 (shellblock -> SHELL_DELIMITER proc SHELL_DELIMITER .)
    STRING          reduce using rule 20 (shellblock -> SHELL_DELIMITER proc SHELL_DELIMITER .)
    DOCSTRING       reduce using rule 20 (shellblock -> SHELL_DELIMITER proc SHELL_DELIMITER .)
    NL              reduce using rule 20 (shellblock -> SHELL_DELIMITER proc SHELL_DELIMITER .)


state 55

    (19) suite -> INDENT nonempty_block DEDENT .

    INDENT          reduce using rule 19 (suite -> INDENT nonempty_block DEDENT .)
    SHELL_DELIMITER reduce using rule 19 (suite -> INDENT nonempty_block DEDENT .)
    PYTHON          reduce using rule 19 (suite -> INDENT nonempty_block DEDENT .)
    STRING          reduce using rule 19 (suite -> INDENT nonempty_block DEDENT .)
    DOCSTRING       reduce using rule 19 (suite -> INDENT nonempty_block DEDENT .)
    $end            reduce using rule 19 (suite -> INDENT nonempty_block DEDENT .)
    DEDENT          reduce using rule 19 (suite -> INDENT nonempty_block DEDENT .)


state 56

    (26) arglist -> arg empty .

    STREAM_IN       reduce using rule 26 (arglist -> arg empty .)
    PIPE            reduce using rule 26 (arglist -> arg empty .)
    ERRPIPE         reduce using rule 26 (arglist -> arg empty .)
    BOTHPIPE        reduce using rule 26 (arglist -> arg empty .)
    STREAM_OUT      reduce using rule 26 (arglist -> arg empty .)
    ERROUT          reduce using rule 26 (arglist -> arg empty .)
    BOTHOUT         reduce using rule 26 (arglist -> arg empty .)
    SHELL_DELIMITER reduce using rule 26 (arglist -> arg empty .)
    COMMA           reduce using rule 26 (arglist -> arg empty .)
    RPAREN          reduce using rule 26 (arglist -> arg empty .)


state 57

    (27) arglist -> arg arglist .

    STREAM_IN       reduce using rule 27 (arglist -> arg arglist .)
    PIPE            reduce using rule 27 (arglist -> arg arglist .)
    ERRPIPE         reduce using rule 27 (arglist -> arg arglist .)
    BOTHPIPE        reduce using rule 27 (arglist -> arg arglist .)
    STREAM_OUT      reduce using rule 27 (arglist -> arg arglist .)
    ERROUT          reduce using rule 27 (arglist -> arg arglist .)
    BOTHOUT         reduce using rule 27 (arglist -> arg arglist .)
    SHELL_DELIMITER reduce using rule 27 (arglist -> arg arglist .)
    COMMA           reduce using rule 27 (arglist -> arg arglist .)
    RPAREN          reduce using rule 27 (arglist -> arg arglist .)


state 58

    (22) proc -> command . empty
    (23) proc -> command . procout
    (3) empty -> .
    (31) procout -> . pipeout
    (32) procout -> . streamout
    (39) pipeout -> . PIPE empty proc empty empty empty
    (40) pipeout -> . PIPE LPAREN proc COMMA proc RPAREN
    (41) pipeout -> . ERRPIPE empty empty empty proc empty
    (42) pipeout -> . BOTHPIPE proc
    (35) streamout -> . STREAM_OUT empty arg empty empty empty
    (36) streamout -> . STREAM_OUT LPAREN arg COMMA arg RPAREN
    (37) streamout -> . ERROUT empty empty empty arg empty
    (38) streamout -> . BOTHOUT arg

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)
    PIPE            shift and go to state 52
    ERRPIPE         shift and go to state 51
    BOTHPIPE        shift and go to state 44
    STREAM_OUT      shift and go to state 49
    ERROUT          shift and go to state 46
    BOTHOUT         shift and go to state 48

    empty                          shift and go to state 47
    procout                        shift and go to state 43
    streamout                      shift and go to state 50
    pipeout                        shift and go to state 53

state 59

    (42) pipeout -> BOTHPIPE proc .

    SHELL_DELIMITER reduce using rule 42 (pipeout -> BOTHPIPE proc .)
    COMMA           reduce using rule 42 (pipeout -> BOTHPIPE proc .)
    RPAREN          reduce using rule 42 (pipeout -> BOTHPIPE proc .)


state 60

    (33) procin -> command STREAM_IN arg . procout
    (34) procin -> command STREAM_IN arg . empty
    (31) procout -> . pipeout
    (32) procout -> . streamout
    (3) empty -> .
    (39) pipeout -> . PIPE empty proc empty empty empty
    (40) pipeout -> . PIPE LPAREN proc COMMA proc RPAREN
    (41) pipeout -> . ERRPIPE empty empty empty proc empty
    (42) pipeout -> . BOTHPIPE proc
    (35) streamout -> . STREAM_OUT empty arg empty empty empty
    (36) streamout -> . STREAM_OUT LPAREN arg COMMA arg RPAREN
    (37) streamout -> . ERROUT empty empty empty arg empty
    (38) streamout -> . BOTHOUT arg

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    PIPE            shift and go to state 52
    ERRPIPE         shift and go to state 51
    BOTHPIPE        shift and go to state 44
    STREAM_OUT      shift and go to state 49
    ERROUT          shift and go to state 46
    BOTHOUT         shift and go to state 48

    empty                          shift and go to state 69
    procout                        shift and go to state 68
    streamout                      shift and go to state 50
    pipeout                        shift and go to state 53

state 61

    (37) streamout -> ERROUT empty . empty empty arg empty
    (3) empty -> .

    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 70

state 62

    (38) streamout -> BOTHOUT arg .

    SHELL_DELIMITER reduce using rule 38 (streamout -> BOTHOUT arg .)
    COMMA           reduce using rule 38 (streamout -> BOTHOUT arg .)
    RPAREN          reduce using rule 38 (streamout -> BOTHOUT arg .)


state 63

    (35) streamout -> STREAM_OUT empty . arg empty empty empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    var                            shift and go to state 25
    word                           shift and go to state 26
    arg                            shift and go to state 71
    string                         shift and go to state 32

state 64

    (36) streamout -> STREAM_OUT LPAREN . arg COMMA arg RPAREN
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    var                            shift and go to state 25
    word                           shift and go to state 26
    arg                            shift and go to state 72
    string                         shift and go to state 32

state 65

    (41) pipeout -> ERRPIPE empty . empty empty proc empty
    (3) empty -> .

    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 73

state 66

    (39) pipeout -> PIPE empty . proc empty empty empty
    (22) proc -> . command empty
    (23) proc -> . command procout
    (24) command -> . arg arglist
    (25) command -> . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    word                           shift and go to state 26
    arg                            shift and go to state 28
    var                            shift and go to state 25
    command                        shift and go to state 58
    string                         shift and go to state 32
    proc                           shift and go to state 74

state 67

    (40) pipeout -> PIPE LPAREN . proc COMMA proc RPAREN
    (22) proc -> . command empty
    (23) proc -> . command procout
    (24) command -> . arg arglist
    (25) command -> . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    word                           shift and go to state 26
    arg                            shift and go to state 28
    var                            shift and go to state 25
    command                        shift and go to state 58
    string                         shift and go to state 32
    proc                           shift and go to state 75

state 68

    (33) procin -> command STREAM_IN arg procout .

    SHELL_DELIMITER reduce using rule 33 (procin -> command STREAM_IN arg procout .)


state 69

    (34) procin -> command STREAM_IN arg empty .

    SHELL_DELIMITER reduce using rule 34 (procin -> command STREAM_IN arg empty .)


state 70

    (37) streamout -> ERROUT empty empty . empty arg empty
    (3) empty -> .

    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 76

state 71

    (35) streamout -> STREAM_OUT empty arg . empty empty empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 77

state 72

    (36) streamout -> STREAM_OUT LPAREN arg . COMMA arg RPAREN

    COMMA           shift and go to state 78


state 73

    (41) pipeout -> ERRPIPE empty empty . empty proc empty
    (3) empty -> .

    WORD            reduce using rule 3 (empty -> .)
    VARNAME         reduce using rule 3 (empty -> .)
    STRING          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 79

state 74

    (39) pipeout -> PIPE empty proc . empty empty empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 80

state 75

    (40) pipeout -> PIPE LPAREN proc . COMMA proc RPAREN

    COMMA           shift and go to state 81


state 76

    (37) streamout -> ERROUT empty empty empty . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    var                            shift and go to state 25
    word                           shift and go to state 26
    arg                            shift and go to state 82
    string                         shift and go to state 32

state 77

    (35) streamout -> STREAM_OUT empty arg empty . empty empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 83

state 78

    (36) streamout -> STREAM_OUT LPAREN arg COMMA . arg RPAREN
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    var                            shift and go to state 25
    word                           shift and go to state 26
    arg                            shift and go to state 84
    string                         shift and go to state 32

state 79

    (41) pipeout -> ERRPIPE empty empty empty . proc empty
    (22) proc -> . command empty
    (23) proc -> . command procout
    (24) command -> . arg arglist
    (25) command -> . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    word                           shift and go to state 26
    arg                            shift and go to state 28
    var                            shift and go to state 25
    command                        shift and go to state 58
    string                         shift and go to state 32
    proc                           shift and go to state 85

state 80

    (39) pipeout -> PIPE empty proc empty . empty empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 86

state 81

    (40) pipeout -> PIPE LPAREN proc COMMA . proc RPAREN
    (22) proc -> . command empty
    (23) proc -> . command procout
    (24) command -> . arg arglist
    (25) command -> . arg empty
    (28) arg -> . word
    (29) arg -> . var
    (30) arg -> . string
    (45) word -> . WORD
    (44) var -> . VARNAME
    (43) string -> . STRING

    WORD            shift and go to state 30
    VARNAME         shift and go to state 29
    STRING          shift and go to state 27

    word                           shift and go to state 26
    arg                            shift and go to state 28
    var                            shift and go to state 25
    command                        shift and go to state 58
    string                         shift and go to state 32
    proc                           shift and go to state 87

state 82

    (37) streamout -> ERROUT empty empty empty arg . empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 88

state 83

    (35) streamout -> STREAM_OUT empty arg empty empty . empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 89

state 84

    (36) streamout -> STREAM_OUT LPAREN arg COMMA arg . RPAREN

    RPAREN          shift and go to state 90


state 85

    (41) pipeout -> ERRPIPE empty empty empty proc . empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 91

state 86

    (39) pipeout -> PIPE empty proc empty empty . empty
    (3) empty -> .

    SHELL_DELIMITER reduce using rule 3 (empty -> .)
    COMMA           reduce using rule 3 (empty -> .)
    RPAREN          reduce using rule 3 (empty -> .)

    empty                          shift and go to state 92

state 87

    (40) pipeout -> PIPE LPAREN proc COMMA proc . RPAREN

    RPAREN          shift and go to state 93


state 88

    (37) streamout -> ERROUT empty empty empty arg empty .

    SHELL_DELIMITER reduce using rule 37 (streamout -> ERROUT empty empty empty arg empty .)
    COMMA           reduce using rule 37 (streamout -> ERROUT empty empty empty arg empty .)
    RPAREN          reduce using rule 37 (streamout -> ERROUT empty empty empty arg empty .)


state 89

    (35) streamout -> STREAM_OUT empty arg empty empty empty .

    SHELL_DELIMITER reduce using rule 35 (streamout -> STREAM_OUT empty arg empty empty empty .)
    COMMA           reduce using rule 35 (streamout -> STREAM_OUT empty arg empty empty empty .)
    RPAREN          reduce using rule 35 (streamout -> STREAM_OUT empty arg empty empty empty .)


state 90

    (36) streamout -> STREAM_OUT LPAREN arg COMMA arg RPAREN .

    SHELL_DELIMITER reduce using rule 36 (streamout -> STREAM_OUT LPAREN arg COMMA arg RPAREN .)
    COMMA           reduce using rule 36 (streamout -> STREAM_OUT LPAREN arg COMMA arg RPAREN .)
    RPAREN          reduce using rule 36 (streamout -> STREAM_OUT LPAREN arg COMMA arg RPAREN .)


state 91

    (41) pipeout -> ERRPIPE empty empty empty proc empty .

    SHELL_DELIMITER reduce using rule 41 (pipeout -> ERRPIPE empty empty empty proc empty .)
    COMMA           reduce using rule 41 (pipeout -> ERRPIPE empty empty empty proc empty .)
    RPAREN          reduce using rule 41 (pipeout -> ERRPIPE empty empty empty proc empty .)


state 92

    (39) pipeout -> PIPE empty proc empty empty empty .

    SHELL_DELIMITER reduce using rule 39 (pipeout -> PIPE empty proc empty empty empty .)
    COMMA           reduce using rule 39 (pipeout -> PIPE empty proc empty empty empty .)
    RPAREN          reduce using rule 39 (pipeout -> PIPE empty proc empty empty empty .)


state 93

    (40) pipeout -> PIPE LPAREN proc COMMA proc RPAREN .

    SHELL_DELIMITER reduce using rule 40 (pipeout -> PIPE LPAREN proc COMMA proc RPAREN .)
    COMMA           reduce using rule 40 (pipeout -> PIPE LPAREN proc COMMA proc RPAREN .)
    RPAREN          reduce using rule 40 (pipeout -> PIPE LPAREN proc COMMA proc RPAREN .)

